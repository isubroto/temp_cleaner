# name: Submit to WinGet

# on:
#   release:
#     types: []
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Version to submit to WinGet (e.g., 1.0.0)'
#         required: true
#         type: string

# permissions:
#   contents: read
#   pull-requests: write

# jobs:
#   submit-to-winget:
#     runs-on: windows-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set version and validate
#         id: version
#         shell: pwsh
#         run: |
#           if ("${{ github.event_name }}" -eq "workflow_dispatch") {
#             $version = "${{ github.event.inputs.version }}"
#           } else {
#             $version = "${{ github.event.release.tag_name }}" -replace '^v', ''
#           }
          
#           if ($version -notmatch '^\d+\.\d+\.\d+(\.\d+)?$') {
#             Write-Error "Invalid version format: $version. Expected format: X.Y.Z or X.Y.Z.W"
#             exit 1
#           }

#           "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
#           Write-Host "✅ Using version: $version"

#       - name: Check MSI availability
#         shell: pwsh
#         run: |
#           $version = "${{ steps.version.outputs.VERSION }}"
#           $msiUrl = "https://github.com/${{ github.repository }}/releases/download/v$version/Temp_Cleaner-$version.msi"
          
#           Write-Host "🔍 Checking MSI availability at: $msiUrl"
#           try {
#             $response = Invoke-WebRequest -Uri $msiUrl -Method Head -ErrorAction Stop
#             Write-Host "✅ MSI found (Status: $($response.StatusCode))"
#           } catch {
#             Write-Error "❌ MSI not found at $msiUrl. Error: $($_.Exception.Message)"
#             Write-Host "Please ensure:"
#             Write-Host "1. The release v$version is published (not draft)"
#             Write-Host "2. The MSI file Temp_Cleaner-$version.msi is attached to the release"
#             exit 1
#           }

#       - name: Download and analyze MSI
#         shell: pwsh
#         run: |
#           $version = "${{ steps.version.outputs.VERSION }}"
#           $msiUrl = "https://github.com/${{ github.repository }}/releases/download/v$version/Temp_Cleaner-$version.msi"

#           Write-Host "📥 Downloading MSI from: $msiUrl"
#           Invoke-WebRequest -Uri $msiUrl -OutFile "TempCleaner.msi" -ErrorAction Stop
          
#           if (-not (Test-Path "TempCleaner.msi")) {
#             Write-Error "❌ MSI download failed"
#             exit 1
#           }

#           $fileSize = (Get-Item "TempCleaner.msi").Length
#           Write-Host "✅ MSI downloaded successfully (Size: $([math]::Round($fileSize/1MB, 2)) MB)"

#           $hash = (Get-FileHash -Path "TempCleaner.msi" -Algorithm SHA256).Hash
#           "MSI_HASH=$hash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
#           Write-Host "📋 SHA256 Hash: $hash"

#           Write-Host "🔍 Extracting Product Code from MSI..."
#           choco install lessmsi -y
#           $info = & lessmsi info TempCleaner.msi | Out-String
#           if ($info -match "ProductCode.*:\s*({.*})") {
#             $productCode = $matches[1]
#             "PRODUCT_CODE=$productCode" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
#             Write-Host "✅ Product Code extracted: $productCode"
#           } else {
#             Write-Error "❌ Could not extract ProductCode from MSI"
#             exit 1
#           }

#       - name: Create WinGet manifests
#         shell: pwsh
#         run: |
#           $version = "${{ steps.version.outputs.VERSION }}"
#           $repoUrl = "https://github.com/${{ github.repository }}"
#           $msiUrl = "$repoUrl/releases/download/v$version/Temp_Cleaner-$version.msi"
#           $hash = "${{ env.MSI_HASH }}"
#           $productCode = "${{ env.PRODUCT_CODE }}"
#           $releaseDate = Get-Date -Format 'yyyy-MM-dd'

#           Write-Host "📝 Creating WinGet manifests for version $version"

#           $manifestDir = "winget-manifests/SubrotoSaha.TempCleaner/$version"
#           New-Item -ItemType Directory -Force -Path $manifestDir | Out-Null
          
#           # Version manifest
#           $versionManifest = @"
# # yaml-language-server: `$schema=https://aka.ms/winget-manifest.version.1.6.0.schema.json
# PackageIdentifier: SubrotoSaha.TempCleaner
# PackageVersion: $version
# DefaultLocale: en-US
# ManifestType: version
# ManifestVersion: 1.6.0
# "@

#           # Locale manifest
#           $localeManifest = @"
# # yaml-language-server: `$schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json
# PackageIdentifier: SubrotoSaha.TempCleaner
# PackageVersion: $version
# PackageLocale: en-US
# Publisher: Subroto Saha
# PublisherUrl: $repoUrl
# PublisherSupportUrl: $repoUrl/issues
# Author: Subroto Saha
# PackageName: TempCleaner
# PackageUrl: $repoUrl
# License: MIT
# LicenseUrl: $repoUrl/blob/main/LICENSE
# Copyright: Copyright (c) 2025 Subroto Saha
# CopyrightUrl: $repoUrl/blob/main/LICENSE
# ShortDescription: A powerful Windows temporary files cleaner
# Description: |-
#   TempCleaner is a professional Windows utility that helps you clean temporary files, system cache, and free up disk space. 
#   Features include:
#   - Safe cleaning algorithms
#   - Detailed scan reports  
#   - Scheduled cleaning options
#   - User-friendly interface
#   - System optimization tools
# Moniker: tempcleaner
# Tags:
# - cleaner
# - temp-files
# - disk-cleanup
# - system-utility
# - windows
# - maintenance
# - optimization
# - cache-cleaner
# ReleaseNotes: |-
#   Release notes for TempCleaner v$version
  
#   For detailed changelog and updates, visit the release page.
# ReleaseNotesUrl: $repoUrl/releases/tag/v$version
# PurchaseUrl: $repoUrl
# InstallationNotes: Administrator privileges recommended for full functionality
# Documentations:
# - DocumentLabel: GitHub Repository
#   DocumentUrl: $repoUrl
# ManifestType: defaultLocale
# ManifestVersion: 1.6.0
# "@

#           # Installer manifest
#           $installerManifest = @"
# # yaml-language-server: `$schema=https://aka.ms/winget-manifest.installer.1.6.0.schema.json
# PackageIdentifier: SubrotoSaha.TempCleaner
# PackageVersion: $version
# Platform:
# - Windows.Desktop
# MinimumOSVersion: 10.0.0.0
# InstallerType: msi
# Scope: machine
# InstallModes:
# - interactive
# - silent
# - silentWithProgress
# UpgradeBehavior: install
# ReleaseDate: $releaseDate
# Installers:
# - Architecture: x64
#   InstallerUrl: $msiUrl
#   InstallerSha256: $hash
#   ProductCode: '$productCode'
#   InstallerSwitches:
#     Silent: /quiet
#     SilentWithProgress: /passive
#     InstallLocation: INSTALLDIR="<INSTALLPATH>"
#   ExpectedReturnCodes:
#   - InstallerReturnCode: 0
#     ReturnResponse: installSuccess
#   - InstallerReturnCode: 1641
#     ReturnResponse: rebootInitiated
#   - InstallerReturnCode: 3010
#     ReturnResponse: rebootRequiredToFinish
# ManifestType: installer
# ManifestVersion: 1.6.0
# "@

#           # Write manifests
#           $versionManifest   | Out-File "$manifestDir/SubrotoSaha.TempCleaner.yaml" -Encoding UTF8
#           $localeManifest    | Out-File "$manifestDir/SubrotoSaha.TempCleaner.locale.en-US.yaml" -Encoding UTF8
#           $installerManifest | Out-File "$manifestDir/SubrotoSaha.TempCleaner.installer.yaml" -Encoding UTF8

#           Write-Host "✅ WinGet manifests created successfully"
#           Get-ChildItem $manifestDir | ForEach-Object { Write-Host "   - $($_.Name)" }

#       - name: Validate WinGet manifests
#         shell: pwsh
#         run: |
#           Write-Host "🔍 Validating WinGet manifests..."
#           $manifestDir = "winget-manifests/SubrotoSaha.TempCleaner/${{ steps.version.outputs.VERSION }}"
#           $files = @(
#             "SubrotoSaha.TempCleaner.yaml",
#             "SubrotoSaha.TempCleaner.locale.en-US.yaml", 
#             "SubrotoSaha.TempCleaner.installer.yaml"
#           )
          
#           foreach ($file in $files) {
#             $filePath = Join-Path $manifestDir $file
#             if (Test-Path $filePath) {
#               $content = Get-Content $filePath -Raw
#               if ($content.Length -gt 0) {
#                 Write-Host "✅ $file - Valid ($($content.Length) characters)"
#               } else {
#                 Write-Error "❌ $file - Empty file"
#                 exit 1
#               }
#             } else {
#               Write-Error "❌ $file - File not found"
#               exit 1
#             }
#           }
#           Write-Host "✅ All manifest files validated successfully"

#       - name: Upload WinGet manifests as artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: winget-manifests-v${{ steps.version.outputs.VERSION }}
#           path: winget-manifests/
#           retention-days: 30

#       - name: Submit to WinGet Community Repository
#         uses: vedantmgoyal9/winget-releaser@v2
#         with:
#           identifier: SubrotoSaha.TempCleaner
#           version: ${{ steps.version.outputs.VERSION }}
#           installers-regex: '\.msi$'
#           token: ${{ secrets.WINGET_TOKEN }}
#           fork-user: ${{ secrets.WINGET_FORK_USER }}
#           release-tag: v${{ steps.version.outputs.VERSION }}

#       - name: Summary
#         shell: pwsh
#         run: |
#           Write-Host ""
#           Write-Host "🎉 WinGet submission completed!"
#           Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
#           Write-Host "📦 Package: SubrotoSaha.TempCleaner"
#           Write-Host "🏷️  Version: ${{ steps.version.outputs.VERSION }}"
#           Write-Host "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }}"
#           Write-Host "📋 Hash: ${{ env.MSI_HASH }}"
#           Write-Host "🆔 Product Code: ${{ env.PRODUCT_CODE }}"
#           Write-Host ""
#           Write-Host "📝 Next steps:"
#           Write-Host "   1. Check the PR created in microsoft/winget-pkgs repository"
#           Write-Host "   2. Monitor the PR for any feedback from WinGet maintainers"
#           Write-Host "   3. Once approved, your package will be available via 'winget install SubrotoSaha.TempCleaner'"
#           Write-Host ""
#           Write-Host "📊 View submission status: https://github.com/microsoft/winget-pkgs/pulls"
