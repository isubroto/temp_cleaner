name: Release WPF App with MSI

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write
env:
  project: ./TempCleaner.csproj
jobs:
  release:
    if: ${{ github.actor != 'github-actions' }}
    runs-on: windows-latest
    name: Build and Release WPF App with MSI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0

      - name: Update .csproj Version
        shell: pwsh
        run: |
          $projFile = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
          Write-Host "Updating version in: $($projFile.FullName)"
          $version = "${{ steps.gitversion.outputs.FullSemVer }}"

          # Replace '+' with '.' in version to make it safe for file naming
          $safeVersion = $version -replace '\+', '.'
          $versionTag = "<Version>$safeVersion</Version>"

          # Read original content
          $content = Get-Content $projFile.FullName -Raw

          if ($content -notmatch '<Version>.*?</Version>') {
              # Insert <Version> before </PropertyGroup>
              $content = $content -replace '</PropertyGroup>', "$versionTag`n</PropertyGroup>"
          } else {
              # Replace existing <Version>
              $content = $content -replace '<Version>.*?</Version>', $versionTag
          }

          # Write updated content back
          Set-Content $projFile.FullName $content -Encoding UTF8

          # Verify the updated version
          Get-Content $projFile.FullName | Select-String "<Version>"

      - name: Restore Dependencies
        run: dotnet restore ${{env.project}} -r win-x64

      - name: build WPF App
        run: dotnet build ${{env.project}} -c Release --no-restore
      - name: publish WPF App
        run: dotnet publish ${{env.project}} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --no-build

      - name: Install WiX Toolset
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix/releases/download/v6.0.0/wix-cli-x64.msi -OutFile wix6.msi
          Start-Process wix6.msi -ArgumentList "/quiet" -Wait
          Remove-Item wix6.msi

      - name: Add WiX Toolset to PATH
        run: |
          echo "Adding WiX Toolset to PATH"
          $env:PATH = "$env:PATH;C:\Program Files\WiX Toolset v6.0\bin\x64"

      - name: Generate Files.wxs excluding 'publish' folder
        run: |
          & "C:\Program Files\WiX Toolset v6.0\bin\x64\heat.exe" dir "bin\Release\net8.0-windows\win-x64" `
            -cg AppFiles `
            -dr INSTALLFOLDER `
            -srd -gg `
            -sreg -scom `
            -var var.SourceDir `
            -out Installer\Files.wxs `
            -t Installer\TransformExcludePublish.xsl

      - name: show Files.wxs
        run: |
          Get-Content -Path "Installer\Files.wxs"

      - name: show product.wxs
        run: |
          Get-Content -Path "Installer\Product.wxs"

      - name: Build MSI Installer
        working-directory: Installer
        run: |
          # Get version from GitVersion
          $version = "${{ steps.gitversion.outputs.FullSemVer }}"

          # Replace '+' with '.' in version to make it safe for file naming
          $safeVersion = $version -replace '\+', '.'

          # Write to GitHub environment file (this is how you persist it)
          "SAFE_VERSION=$safeVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # Build the MSI using WiX Toolset (Ensure wix is in PATH or use full path)
          & "C:\Program Files\WiX Toolset v6.0\bin\wix.exe" build Product.wxs Files.wxs -arch x64 -define ProductVersion=$safeVersion -define SourceDir="..\bin\Release\net8.0-windows\win-x64" -out "../publish/Temp_Cleaner-$safeVersion.msi"

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: "TempCleaner v${{ env.SAFE_VERSION }}"
          tag_name: v${{ env.SAFE_VERSION }}
          body: |
            ## 🧹 TempCleaner v${{ env.SAFE_VERSION }}
            
            ### 📦 What's Included
            - **Portable Executable**: Ready-to-run single-file application
            - **MSI Installer**: Professional Windows installer package
            
            ### 🚀 Installation Options
            
            #### Option 1: MSI Installer (Recommended)
            1. Download `Temp_Cleaner-${{ env.SAFE_VERSION }}.msi`
            2. Run the installer as Administrator
            3. Follow the installation wizard
            4. Launch from Start Menu or Desktop shortcut
            
            #### Option 2: Portable Version
            1. Download the `.exe` file
            2. Run directly - no installation required
            3. Perfect for USB drives or temporary usage
            
            ### 📋 System Requirements
            - Windows 10/11 (x64)
            - .NET 8.0 Runtime (included in self-contained builds)
            - Administrator privileges (recommended for full functionality)
            
            ### 🔧 Technical Details
            - **Architecture**: x64
            - **Framework**: .NET 8.0
            - **Package Type**: Self-contained, single-file deployment
            - **Build Configuration**: Release
            
            ### 📝 Release Notes
            This release includes improvements and bug fixes. For detailed changelog, please check the commit history.
            
            ### 🐛 Known Issues
            - Please report any issues in the [Issues](https://github.com/${{ github.repository }}/issues) section
            
            ### 💡 Support
            If you encounter any problems, please:
            1. Check the [documentation](https://github.com/${{ github.repository }}/wiki)
            2. Search existing [issues](https://github.com/${{ github.repository }}/issues)
            3. Create a new issue if needed
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.gitversion.outputs.PreviousVersion }}...v${{ env.SAFE_VERSION }}
          files: |
            bin/Release/net8.0-windows/win-x64/publish/*.exe
            publish/**/Temp_Cleaner-${{ env.SAFE_VERSION }}.msi
          draft: false
          prerelease: ${{ contains(steps.gitversion.outputs.FullSemVer, '-') }}
          generate_release_notes: true

      - name: Commit & Push .csproj version change (if any)
        shell: pwsh
        run: |
          git config user.name "Subroto Saha"
          git config user.email "isubrotosaha@gmail.com"

          # Stage the .csproj file if modified
          git add $env:project

          # Check for staged changes
          if (git diff --cached --quiet) {
            Write-Host "🟢 No changes to commit. Version already up to date."
          } else {
            $version = "${{ steps.gitversion.outputs.FullSemVer }}"
            $safeVersion = $version -replace '\+', '.'
            git commit -m "🔖 Bump version to $safeVersion"
            git push origin HEAD
            Write-Host "✅ Committed and pushed updated .csproj version: $safeVersion"
          }
      - name: Create WinGet Manifest
        shell: pwsh
        run: |
          $version = "${{ env.SAFE_VERSION }}"
          $repoUrl = "https://github.com/${{ github.repository }}"
          $msiUrl = "$repoUrl/releases/download/v$version/Temp_Cleaner-$version.msi"
          
          # Create winget directory
          New-Item -ItemType Directory -Force -Path "winget"
          
          # Get MSI file hash
          $msiPath = "publish/Temp_Cleaner-$version.msi"
          $hash = (Get-FileHash -Path $msiPath -Algorithm SHA256).Hash
          
          Write-Host "MSI Hash: $hash"
          Write-Host "MSI URL: $msiUrl"
          
          # Create version manifest
          $versionManifest = @"
          PackageIdentifier: SubrotoSaha.TempCleaner
          PackageVersion: $version
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.6.0
          "@
          
          # Create default locale manifest
          $localeManifest = @"
          PackageIdentifier: SubrotoSaha.TempCleaner
          PackageVersion: $version
          PackageLocale: en-US
          Publisher: Subroto Saha
          PublisherUrl: $repoUrl
          PublisherSupportUrl: $repoUrl/issues
          Author: Subroto Saha
          PackageName: TempCleaner
          PackageUrl: $repoUrl
          License: MIT
          LicenseUrl: $repoUrl/blob/main/LICENSE
          Copyright: Copyright (c) 2025 Subroto Saha
          ShortDescription: A powerful Windows temporary files cleaner
          Description: TempCleaner is a professional Windows utility that helps you clean temporary files, system cache, and free up disk space. Features include safe cleaning algorithms, detailed scan reports, and scheduled cleaning options.
          Moniker: tempcleaner
          Tags:
          - cleaner
          - temp-files
          - disk-cleanup
          - system-utility
          - windows
          - maintenance
          ReleaseNotes: |
            This release includes improvements and bug fixes.
            For detailed changelog, visit: $repoUrl/releases/tag/v$version
          ReleaseNotesUrl: $repoUrl/releases/tag/v$version
          ManifestType: defaultLocale
          ManifestVersion: 1.6.0
          "@
          
          # Create installer manifest (we'll get ProductCode later)
          $installerManifest = @"
          PackageIdentifier: SubrotoSaha.TempCleaner
          PackageVersion: $version
          Platform:
          - Windows.Desktop
          MinimumOSVersion: 10.0.0.0
          Scope: machine
          InstallModes:
          - interactive
          - silent
          - silentWithProgress
          UpgradeBehavior: install
          Installers:
          - Architecture: x64
            InstallerType: wix
            InstallerUrl: $msiUrl
            InstallerSha256: $hash
            ProductCode: '{PLACEHOLDER-PRODUCT-GUID}'
            Scope: machine
            InstallerSwitches:
              Silent: /quiet
              SilentWithProgress: /passive
          ManifestType: installer
          ManifestVersion: 1.6.0
          "@
          
          # Write manifests to files
          $versionManifest | Out-File -FilePath "winget/SubrotoSaha.TempCleaner.yaml" -Encoding UTF8
          $localeManifest | Out-File -FilePath "winget/SubrotoSaha.TempCleaner.locale.en-US.yaml" -Encoding UTF8
          $installerManifest | Out-File -FilePath "winget/SubrotoSaha.TempCleaner.installer.yaml" -Encoding UTF8
          
          Write-Host "✅ WinGet manifests created successfully"

      - name: Upload WinGet Manifests as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: winget-manifests-v${{ env.SAFE_VERSION }}
          path: winget/

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
