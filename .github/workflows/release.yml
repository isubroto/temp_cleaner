name: Release WPF App with MSI

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  project: ./TempCleaner.csproj

jobs:
  release:
    # Avoid loops if a bot-triggered push occurs
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: windows-latest
    name: Build and Release WPF App with MSI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0

      - name: Compute versions
        id: versions
        shell: pwsh
        run: |
          $full = '${{ steps.gitversion.outputs.FullSemVer }}'
          $safe = $full -replace '\+', '.'
          $msi  = '${{ steps.gitversion.outputs.MajorMinorPatch }}' # 3-part for MSI
          Add-Content -Path $env:GITHUB_OUTPUT -Value "full=$full"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "safe=$safe"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "msi=$msi"

      - name: Update .csproj Version
        shell: pwsh
        run: |
          $projFile = Get-Item $env:project
          Write-Host "Updating version in: $($projFile.FullName)"
          $version = '${{ steps.versions.outputs.safe }}'
          $versionTag = "<Version>$version</Version>"

          $content = Get-Content $projFile.FullName -Raw
          if ($content -notmatch '<Version>.*?</Version>') {
            $content = $content -replace '</PropertyGroup>', "$versionTag`n</PropertyGroup>"
          } else {
            $content = $content -replace '<Version>.*?</Version>', $versionTag
          }
          Set-Content $projFile.FullName $content -Encoding UTF8
          Get-Content $projFile.FullName | Select-String "<Version>"

      - name: Restore Dependencies
        shell: pwsh
        run: dotnet restore ${{ env.project }} -r win-x64

      - name: Build WPF App
        shell: pwsh
        run: dotnet build ${{ env.project }} -c Release --no-restore

      - name: Publish WPF App
        shell: pwsh
        run: dotnet publish ${{ env.project }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --no-build

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix/releases/download/v6.0.0/wix-cli-x64.msi -OutFile wix6.msi
          Start-Process wix6.msi -ArgumentList "/quiet" -Wait
          Remove-Item wix6.msi

      - name: Generate Files.wxs excluding 'publish' folder
        shell: pwsh
        run: |
          & "C:\Program Files\WiX Toolset v6.0\bin\x64\heat.exe" dir "bin\Release\net8.0-windows\win-x64" `
            -cg AppFiles `
            -dr INSTALLFOLDER `
            -srd -gg `
            -sreg -scom `
            -var var.SourceDir `
            -out Installer\Files.wxs `
            -t Installer\TransformExcludePublish.xsl

      - name: Show Files.wxs
        shell: pwsh
        run: Get-Content -Path "Installer\Files.wxs"

      - name: Show Product.wxs
        shell: pwsh
        run: Get-Content -Path "Installer\Product.wxs"

      - name: Build MSI Installer
        working-directory: Installer
        shell: pwsh
        run: |
          $safeVersion = '${{ steps.versions.outputs.safe }}'   # for file names/tags
          $msiVersion  = '${{ steps.versions.outputs.msi }}'    # 3-part numeric for MSI

          "SAFE_VERSION=$safeVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          & "C:\Program Files\WiX Toolset v6.0\bin\wix.exe" build Product.wxs Files.wxs `
            -arch x64 `
            -define ProductVersion=$msiVersion `
            -define SourceDir="..\bin\Release\net8.0-windows\win-x64" `
            -out "../publish/DeepCleaner-$safeVersion.msi"

      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: "DeepCleaner v${{ steps.versions.outputs.safe }}"
          tag_name: v${{ steps.versions.outputs.safe }}
          body: |
            ## üßπ DeepCleaner v${{ steps.versions.outputs.safe }}
            
            ### üì¶ What's Included
            - Portable Executable (single-file)
            - MSI Installer
            
            ### üöÄ Installation
            - Download `DeepCleaner-${{ steps.versions.outputs.safe }}.msi` and run it
            - Or use the portable `.exe`
            
            ### üìù Notes
            Improvements and bug fixes. Report issues here: https://github.com/${{ github.repository }}/issues
          files: |
            bin/Release/net8.0-windows/win-x64/publish/*.exe
            publish/DeepCleaner-${{ steps.versions.outputs.safe }}.msi
          draft: false
          prerelease: ${{ contains(steps.gitversion.outputs.FullSemVer, '-') }}
          generate_release_notes: true

      - name: Commit & Push .csproj version change (if any)
        shell: pwsh
        run: |
          git config user.name "Subroto Saha"
          git config user.email "isubrotosaha@gmail.com"
          git add $env:project
          if (git diff --cached --quiet) {
            Write-Host "üü¢ No changes to commit. Version already up to date."
          } else {
            $safeVersion = '${{ steps.versions.outputs.safe }}'
            git commit -m "üîñ Bump version to $safeVersion"
            git push origin HEAD
            Write-Host "‚úÖ Committed and pushed updated .csproj version: $safeVersion"
          }

      # -----------------------------
      # WinGet: Create manifests, validate, submit
      # Only for stable releases (no '-' in version)
      # -----------------------------
      - name: Create WinGet Manifests
        if: ${{ !contains(steps.gitversion.outputs.FullSemVer, '-') }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $version = '${{ steps.versions.outputs.safe }}'   # e.g., 0.1.31
          $repo = "${{ github.repository }}"
          $repoUrl = "https://github.com/$repo"

          $msiName = "DeepCleaner-$version.msi"
          $msiPath = "publish\$msiName"
          if (-not (Test-Path $msiPath)) { throw "MSI not found at $msiPath" }

          $msiUrl = "$repoUrl/releases/download/v$version/$msiName"

          # Hash
          $hash = (Get-FileHash -Path $msiPath -Algorithm SHA256).Hash

          # Read MSI properties (ProductCode)
          function Get-MsiProperty {
            param([Parameter(Mandatory)][string]$Path,
                  [Parameter(Mandatory)][string]$Property)
            $installer = New-Object -ComObject WindowsInstaller.Installer
            $database  = $installer.GetType().InvokeMember("OpenDatabase","InvokeMethod",$null,$installer,@($Path,0))
            $view = $database.OpenView("SELECT `Value` FROM `Property` WHERE `Property` = '$Property'")
            $view.Execute()
            $record = $view.Fetch()
            $value = if ($record) { $record.StringData(1) } else { $null }
            $view.Close()
            $database = $null
            $installer = $null
            return $value
          }

          $productCode = Get-MsiProperty -Path $msiPath -Property "ProductCode"
          if (-not $productCode) { throw "Failed to read ProductCode from $msiPath" }

          # Create output directory
          New-Item -ItemType Directory -Force -Path "winget" | Out-Null

          # Build manifests
          $versionManifest = @"
          PackageIdentifier: SubrotoSaha.DeepCleaner
          PackageVersion: $version
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.6.0
          "@.Trim()

          $localeManifest = @"
          PackageIdentifier: SubrotoSaha.DeepCleaner
          PackageVersion: $version
          PackageLocale: en-US
          Publisher: Subroto Saha
          PublisherUrl: $repoUrl
          PublisherSupportUrl: $repoUrl/issues
          Author: Subroto Saha
          PackageName: DeepCleaner
          PackageUrl: $repoUrl
          License: MIT
          LicenseUrl: $repoUrl/blob/main/LICENSE
          Copyright: Copyright (c) 2025 Subroto Saha
          ShortDescription: A powerful Windows temporary files cleaner.
          Description: DeepCleaner is a professional Windows utility that helps you clean temporary files, system cache, and free up disk space. Features include safe cleaning algorithms, detailed scan reports, and scheduled cleaning options.
          Moniker: deepcleaner
          Tags:
            - cleaner
            - temp-files
            - disk-cleanup
            - system-utility
            - windows
            - maintenance
          ReleaseNotes: |
            This release includes improvements and bug fixes.
            For detailed changelog, visit: $repoUrl/releases/tag/v$version
          ReleaseNotesUrl: $repoUrl/releases/tag/v$version
          ManifestType: defaultLocale
          ManifestVersion: 1.6.0
          "@.Trim()

          $installerManifest = @"
          PackageIdentifier: SubrotoSaha.DeepCleaner
          PackageVersion: $version
          Platform:
            - Windows.Desktop
          MinimumOSVersion: 10.0.0.0
          InstallModes:
            - interactive
            - silent
            - silentWithProgress
          UpgradeBehavior: install
          Installers:
            - Architecture: x64
              InstallerType: msi
              InstallerUrl: $msiUrl
              InstallerSha256: $hash
              ProductCode: '$productCode'
              Scope: machine
              InstallerSwitches:
                Silent: /qn /norestart
                SilentWithProgress: /qb! /norestart
          ManifestType: installer
          ManifestVersion: 1.6.0
          "@.Trim()

          Set-Content -Path "winget/SubrotoSaha.DeepCleaner.yaml" -Value $versionManifest -Encoding UTF8
          Set-Content -Path "winget/SubrotoSaha.DeepCleaner.locale.en-US.yaml" -Value $localeManifest -Encoding UTF8
          Set-Content -Path "winget/SubrotoSaha.DeepCleaner.installer.yaml" -Value $installerManifest -Encoding UTF8

          Write-Host "‚úÖ WinGet manifests created"
          Write-Host "MSI URL:  $msiUrl"
          Write-Host "SHA256:   $hash"
          Write-Host "ProductCode: $productCode"

      - name: Upload WinGet Manifests as Artifacts
        if: ${{ !contains(steps.gitversion.outputs.FullSemVer, '-') }}
        uses: actions/upload-artifact@v4
        with:
          name: winget-manifests-v${{ steps.versions.outputs.safe }}
          path: winget/

      - name: Download wingetcreate
        if: ${{ !contains(steps.gitversion.outputs.FullSemVer, '-') }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate.exe" -OutFile wingetcreate.exe

      - name: Validate WinGet manifests
        if: ${{ !contains(steps.gitversion.outputs.FullSemVer, '-') }}
        shell: pwsh
        run: |
             if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
              Write-Host "winget CLI not found on this runner; skipping validation."
              exit 0
              }
              winget --info
              winget validate --manifest winget

      - name: Submit to WinGet
        if: ${{ !contains(steps.gitversion.outputs.FullSemVer, '-') }}
        env:
          WINGET_TOKEN: ${{ secrets.WINGET_TOKEN }}
        shell: pwsh
        run: .\wingetcreate.exe submit --prtitle "Add SubrotoSaha.DeepCleaner v${{ steps.versions.outputs.safe }}" --token "$env:WINGET_TOKEN" winget